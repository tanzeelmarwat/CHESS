/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImageDisplay.java
 *
 * Created on Mar 29, 2012, 12:36:30 AM
 */
package org.me.mybackgroundapp;

import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

    /**
 *
 * @author 13100177
 */
public class ImageDisplay extends javax.swing.JFrame {

    /**
     * Creates new form ImageDisplay
     */
    int x;    int[][] array;

    int y;
    int piece;
    int first[];
    boolean selected;
    int kill[];
    JLabel label;

    public ImageDisplay() {
        label=new JLabel();
        array = new int[9][9];
        kill = new int[8];
        first=new int[16];
        selected=false;
        for(int i=0;i<16;i++)
            first[i]=1;
        for(int i=0;i<8;i++)
        kill[i]=0;
        for (int j = 1; j < 9; j++) {
            for (int i = 1; i < 9; i++) {
                if (j > 2 && j < 7) {
                    array[i][j] = 0;
                } else if (j == 1) {
                    array[i][j] = i;
                } else if (j == 2) {
                    array[i][j] = 8 + i;
                } else if (j == 7) {
                    array[i][j] = 24 + i;
                } else if (j == 8) {
                    array[i][j] = 16 + i;
                }
            }

        }
        for (int i = 1; i < 9; i++) {
            for (int j = 1; j < 9; j++) {
                System.out.println(array[j][i]);
            }
        }

        initComponents();
    }
    

   
    
/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setOpaque(false);
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/br.gif"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bn.gif"))); // NOI18N
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bb.gif"))); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bk.gif"))); // NOI18N
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bp.gif"))); // NOI18N
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bp.gif"))); // NOI18N
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bp.gif"))); // NOI18N
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bp.gif"))); // NOI18N
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bp.gif"))); // NOI18N
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bp.gif"))); // NOI18N
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bp.gif"))); // NOI18N
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bp.gif"))); // NOI18N
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bq.gif"))); // NOI18N
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bb.gif"))); // NOI18N
        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel15MouseClicked(evt);
            }
        });

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/bn.gif"))); // NOI18N
        jLabel16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel16MouseClicked(evt);
            }
        });

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/br.gif"))); // NOI18N
        jLabel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel17MouseClicked(evt);
            }
        });

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wr.gif"))); // NOI18N
        jLabel18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel18MouseClicked(evt);
            }
        });

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wr.gif"))); // NOI18N
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wn.gif"))); // NOI18N
        jLabel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel20MouseClicked(evt);
            }
        });

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wn.gif"))); // NOI18N
        jLabel21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel21MouseClicked(evt);
            }
        });

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wb.gif"))); // NOI18N
        jLabel22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel22MouseClicked(evt);
            }
        });

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wb.gif"))); // NOI18N
        jLabel23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel23MouseClicked(evt);
            }
        });

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wq.gif"))); // NOI18N
        jLabel24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel24MouseClicked(evt);
            }
        });

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wk.gif"))); // NOI18N
        jLabel25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel25MouseClicked(evt);
            }
        });

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wp.gif"))); // NOI18N
        jLabel26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel26MouseClicked(evt);
            }
        });

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wp.gif"))); // NOI18N
        jLabel27.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel27MouseClicked(evt);
            }
        });

        jLabel28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wp.gif"))); // NOI18N
        jLabel28.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel28MouseClicked(evt);
            }
        });

        jLabel29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wp.gif"))); // NOI18N
        jLabel29.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel29MouseClicked(evt);
            }
        });

        jLabel30.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wp.gif"))); // NOI18N
        jLabel30.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel30MouseClicked(evt);
            }
        });

        jLabel31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wp.gif"))); // NOI18N
        jLabel31.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel31MouseClicked(evt);
            }
        });

        jLabel32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wp.gif"))); // NOI18N
        jLabel32.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel32MouseClicked(evt);
            }
        });

        jLabel33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/wp.gif"))); // NOI18N
        jLabel33.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel33MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel17))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)))
                        .addGap(78, 78, 78))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel30)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel31)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel29)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel28)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel27))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(90, 90, 90)
                                        .addComponent(jLabel21)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel23)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel24)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel25)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(108, 108, 108)
                                .addComponent(jLabel33))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel22)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel20))
                                    .addComponent(jLabel32))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel26))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel14)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(280, 280, 280)
                            .addComponent(jLabel31)))
                    .addComponent(jLabel29)
                    .addComponent(jLabel28)
                    .addComponent(jLabel27)
                    .addComponent(jLabel32)
                    .addComponent(jLabel33)
                    .addComponent(jLabel26))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19)
                    .addComponent(jLabel21)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25)
                    .addComponent(jLabel22)
                    .addComponent(jLabel20)
                    .addComponent(jLabel18))
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Game-Board-8x8-grid(Light,Dark)(Chess,Checkers,Reversi).gif"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jLabel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public JLabel getjLabel()
    {
        return label;
    }
    public void setjLabel(JLabel lab) 
    {
        //System.out.println("JLabel set:");
        label=lab;
    }

    public int getArray(int i, int j) {
        if(i>0 && j>0 && i<9 && j<9)
        {
            System.out.println("array return: i="+i+"j="+j+"value="+array[i][j]);
            return array[i][j];
        }
        else
        {
            System.out.println("Index out of bound: i="+i+"j="+j);
            return 0;
        }
    }

    public void setArray(int i, int j, int value) {
        if(i>0 && j>0 && i<9 && j<9)
        {
            System.out.println("point:"+i+","+j+"value="+value);
            array[i][j] = value;
        }
        else
            System.out.println("Array out of bound: i="+i+"j="+j);
    }
    public void setKill(int i, int value)
    {
        kill[i]=value;
    }
    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel2.getLocation().x;
        y = jLabel2.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==1 || kill[1]==1 || kill[2]==1 || kill[3]==1 || kill[4]==1 || kill[5]==1 || kill[6]==1 || kill[7]==1)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece1 p=new Piece1();
            p.kill(jLabel2,lab);
            for (int i=0;i<8;i++)
                kill[i]=0;  
        }
        else
        {
            piece = 1;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel2.setBackground(Color.CYAN);
            jLabel2.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel2);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            for(int i=X+1;i<9;i++)
            {
                if(getArray(i,Y)>16)
                {
                    kill[0]=getArray(i,Y);
                    break;
                }
                else if(getArray(i,Y)>0)
                    break;
            }
            for(int i=X-1;i>0;i--)
            {
                if(getArray(i,Y)>16)
                {
                    kill[1]=getArray(i,Y);
                    break;
                }
                else if(getArray(i,Y)>0)
                    break;
            }
            for(int i=Y+1;i<9;i++)
            {
                if(getArray(X,i)>16)
                {
                    kill[2]=getArray(X,i);
                    break;
                }
                else if(getArray(X,i)>0)
                    break;
            }
            for(int i=Y-1;i>0;i--)
            {
                if(getArray(X,i)>16)
                {
                    kill[3]=getArray(X,i);
                    break;
                }
                else if(getArray(X,i)>0)
                    break;
            }
                //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
         int X,Y;
        x = jLabel3.getLocation().x;
        y = jLabel3.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==2 || kill[1]==2 || kill[2]==2 || kill[3]==2 || kill[4]==2 || kill[5]==2 || kill[6]==2 || kill[7]==2)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece2 p=new Piece2();
            p.kill(jLabel3,lab);
            for (int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 2;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel3.setBackground(Color.CYAN);
            jLabel3.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel3);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            if(X+2>0 && Y+1>0 && X+2<9 && Y+1<9 && getArray(X+2,Y+1)>16)
            kill[0]=getArray(X+2,Y+1);
            if(X+2>0 && Y-1>0 && X+2<9 && Y-1<9 && getArray(X+2,Y-1)>16)
            kill[1]=getArray(X+2,Y-1);
            if(X-2>0 && Y+1>0 && X-2<9 && Y+1<9 && getArray(X-2,Y+1)>16)
            kill[2]=getArray(X-2,Y+1);
            if(X-2>0 && Y-1>0 && X-2<9 && Y-1<9 && getArray(X-2,Y-1)>16)
            kill[3]=getArray(X-2,Y-1);
            if(X+1>0 && Y+2>0 && X+1<9 && Y+2<9 && getArray(X+1,Y+2)>16)
            kill[4]=getArray(X+1,Y+2);
            if(X+1>0 && Y-2>0 && X+1<9 && Y-2<9 && getArray(X+1,Y-2)>16)
            kill[5]=getArray(X+1,Y-2);
            if(X-1>0 && Y+2>0 && X-1<9 && Y+2<9 && getArray(X-1,Y+2)>16)
            kill[6]=getArray(X-1,Y+2);
            if(X-1>0 && Y-2>0 && X-1<9 && Y-2<9 && getArray(X-1,Y-2)>16)
            kill[7]=getArray(X-1,Y-2);
            //System.out.println("KILL"+kill);
        }
        
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel4.getLocation().x;
        y = jLabel4.getLocation().y;
        JLabel lab=getjLabel();
        if(selected &&kill[0]==3 || kill[1]==3 || kill[2]==3 || kill[3]==3 || kill[4]==3 || kill[5]==3 || kill[6]==3 || kill[7]==3)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece3 p=new Piece3();
            p.kill(jLabel4,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 3;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel4.setBackground(Color.CYAN);
            jLabel4.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel4);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            int j=Y+1;
            for(int i=X+1;i<9;i++)
            {
           
                if(getArray(i,j)>16)
                {
                    kill[0]=getArray(i,j);
                    break;
                }
                else if(getArray(i,j)>0)
                    break;
                j++;
            }
            j=Y-1;
            for(int i=X-1;i>0;i--)
            {
                if(getArray(i,j)>16)
                {
                    kill[1]=getArray(i,j);
                    break;
                }
                else if(getArray(i,j)>0)
                    break;
                j--;
            }
            j=X-1;
            for(int i=Y+1;i<9;i++)
            {
                if(getArray(j,i)>16)
                {
                    kill[2]=getArray(j,i);
                    break;
                }
                else if(getArray(j,i)>0)
                    break;
                j--;
            }
            j=X+1;
            for(int i=Y-1;i>0;i--)
            {
                if(getArray(j,i)>16)
                {
                    kill[3]=getArray(j,i);
                    break;
                }
                else if(getArray(j,i)>0)
                    break;
                j++;
            }
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel14.getLocation().x;
        y = jLabel14.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==4 || kill[1]==4 || kill[2]==4 || kill[3]==4 || kill[4]==4 || kill[5]==4 || kill[6]==4 || kill[7]==4)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece4 p=new Piece4();
            p.kill(jLabel14,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 4;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel14.setBackground(Color.CYAN);
            jLabel14.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel14);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            for(int i=X+1;i<9;i++)
            {
                if(i>0 && Y>0 && i<9 && Y<9 && getArray(i,Y)>16)
                {
                    kill[0]=getArray(i,Y);
                    break;
                }
                else if(i>0 && Y>0 && i<9 && Y<9 && getArray(i,Y)>0)
                    break;
            }
            for(int i=X-1;i>0;i--)
            {
                if(i>0 && Y>0 && i<9 && Y<9 && getArray(i,Y)>16)
                {
                    kill[1]=getArray(i,Y);
                    break;
                }
                else if(i>0 && Y>0 && i<9 && Y<9 && getArray(i,Y)>0)
                    break;
            }
            for(int i=Y+1;i<9;i++)
            {
                if(i>0 && X>0 && i<9 && X<9 && getArray(X,i)>16)
                {
                    kill[2]=getArray(X,i);
                    break;
                }
                else if(i>0 && X>0 && i<9 && X<9 && getArray(X,i)>0)
                    break;
            }
            for(int i=Y-1;i>0;i--)
            {
                if(i>0 && X>0 && i<9 && X<9 && getArray(X,i)>16)
                {
                    kill[3]=getArray(X,i);
                    break;
                }
                else if(i>0 && X>0 && i<9 && X<9 && getArray(X,i)>0)
                    break;
            }
            int j=Y+1;
            for(int i=X+1;i<9;i++)
            {
           
                if(i>0 && j>0 && i<9 && j<9 && getArray(i,j)>16)
                {
                    kill[4]=getArray(i,j);
                    break;
                }
                else if(i>0 && j>0 && i<9 && j<9 && getArray(i,j)>0)
                    break;
                j++;
            }
            j=Y-1;
            for(int i=X-1;i>0;i--)
            {
                if(i>0 && j>0 && i<9 && j<9 && getArray(i,j)>16)
                {
                    kill[5]=getArray(i,j);
                    break;
                }
                else if(i>0 && j>0 && i<9 && j<9 && getArray(i,j)>0)
                    break;
                j--;
            }
            j=X-1;
            for(int i=Y+1;i<9;i++)
            {
                if(i>0 && j>0 && i<9 && j<9 && getArray(j,i)>16)
                {
                    kill[6]=getArray(j,i);
                    break;
                }
                else if(i>0 && j>0 && i<9 && j<9 && getArray(j,i)>0)
                    break;
                j--;
            }
            j=X+1;
            for(int i=Y-1;i>0;i--)
            {
                if(i>0 && j>0 && i<9 && j<9 && getArray(j,i)>16)
                {
                    kill[7]=getArray(j,i);
                    break;
                }
                else if(i>0 && j>0 && i<9 && j<9 && getArray(j,i)>0)
                    break;
                j++;
            }
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel14MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel5.getLocation().x;
        y = jLabel5.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==5 || kill[1]==5 || kill[2]==5 || kill[3]==5 || kill[4]==5 || kill[5]==5 || kill[6]==5 || kill[7]==5)
        {
            JOptionPane.showMessageDialog(null, "WHITE WON");
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece5 p=new Piece5();
            p.kill(jLabel5,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 5;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel5.setBackground(Color.CYAN);
            jLabel5.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel5);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            if(X>0 && Y+1>0 && X<9 && Y+1<9 && getArray(X,Y+1)>16)
                kill[0]=getArray(X,Y+1);
            if(X>0 && Y-1>0 && X<9 && Y-1<9 && getArray(X,Y-1)>16)
                kill[1]=getArray(X,Y-1);
            if(X+1>0 && Y>0 && X+1<9 && Y<9 && getArray(X+1,Y)>16)
                kill[2]=getArray(X+1,Y);
            if(X+1>0 && Y+1>0 && X+1<9 && Y+1<9 && getArray(X+1,Y+1)>16)
                kill[3]=getArray(X+1,Y+1);
            if(X+1>0 && Y-1>0 && X+1<9 && Y-1<9 && getArray(X+1,Y-1)>16)
                kill[4]=getArray(X+1,Y-1);
            if(X-1>0 && Y>0 && X-1<9 && Y<9 && getArray(X-1,Y)>16)
                kill[5]=getArray(X-1,Y);
            if(X-1>0 && Y-1>0 && X-1<9 && Y-1<9 && getArray(X-1,Y-1)>16)
                kill[6]=getArray(X-1,Y-1);
            if(X-1>0 && Y+1>0 && X-1<9 && Y+1<9 && getArray(X-1,Y+1)>16)
                kill[7]=getArray(X-1,Y+1);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel17.getLocation().x;
        y = jLabel17.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==8 || kill[1]==8 || kill[2]==8 || kill[3]==8 || kill[4]==8 || kill[5]==8 || kill[6]==8 || kill[7]==8)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece1 p=new Piece1();
            p.kill(jLabel17,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 8;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel17.setBackground(Color.CYAN);
            jLabel17.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel17);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            for(int i=X+1;i<9;i++)
            {
                if(getArray(i,Y)>16)
                {
                    kill[0]=getArray(i,Y);
                    break;
                }
                else if(getArray(i,Y)>0)
                    break;
            }
            for(int i=X-1;i>0;i--)
            {
                if(getArray(i,Y)>16)
                {
                    kill[1]=getArray(i,Y);
                    break;
                }
                else if(getArray(i,Y)>0)
                    break;
            }
            for(int i=Y+1;i<9;i++)
            {
                if(getArray(X,i)>16)
                {
                    kill[2]=getArray(X,i);
                    break;
                }
                else if(getArray(X,i)>0)
                    break;
            }
            for(int i=Y-1;i>0;i--)
            {
                if(getArray(X,i)>16)
                {
                    kill[3]=getArray(X,i);
                    break;
                }
                else if(getArray(X,i)>0)
                    break;
            }
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel17MouseClicked

    private void jLabel16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel16MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel16.getLocation().x;
        y = jLabel16.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==7 || kill[1]==7 || kill[2]==7 || kill[3]==7 || kill[4]==7 || kill[5]==7 || kill[6]==7 || kill[7]==7)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece2 p=new Piece2();
            p.kill(jLabel16,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 7;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel16.setBackground(Color.CYAN);
            jLabel16.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel16);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            if(X+2>0 && Y+1>0 && X+2<9 && Y+1<9 && getArray(X+2,Y+1)>16)
            kill[0]=getArray(X+2,Y+1);
            if(X+2>0 && Y-1>0 && X+2<9 && Y-1<9 && getArray(X+2,Y-1)>16)
            kill[1]=getArray(X+2,Y-1);
            if(X-2>0 && Y+1>0 && X-2<9 && Y+1<9 && getArray(X-2,Y+1)>16)
            kill[2]=getArray(X-2,Y+1);
            if(X-2>0 && Y-1>0 && X-2<9 && Y-1<9 && getArray(X-2,Y-1)>16)
            kill[3]=getArray(X-2,Y-1);
            if(X+1>0 && Y+2>0 && X+1<9 && Y+2<9 && getArray(X+1,Y+2)>16)
            kill[4]=getArray(X+1,Y+2);
            if(X+1>0 && Y-2>0 && X+1<9 && Y-2<9 && getArray(X+1,Y-2)>16)
            kill[5]=getArray(X+1,Y-2);
            if(X-1>0 && Y+2>0 && X-1<9 && Y+2<9 && getArray(X-1,Y+2)>16)
            kill[6]=getArray(X-1,Y+2);
            if(X-1>0 && Y-2>0 && X-1<9 && Y-2<9 && getArray(X-1,Y-2)>16)
            kill[7]=getArray(X-1,Y-2);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel16MouseClicked

    private void jLabel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel15.getLocation().x;
        y = jLabel15.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==6 || kill[1]==6 || kill[2]==6 || kill[3]==6 || kill[4]==6 || kill[5]==6 || kill[6]==6 || kill[7]==6)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece3 p=new Piece3();
            p.kill(jLabel15,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 6;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel15.setBackground(Color.CYAN);
            jLabel15.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel15);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            int j=Y+1;
            for(int i=X+1;i<9;i++)
            {
           
                if(getArray(i,j)>16)
                {
                    kill[0]=getArray(i,j);
                    break;
                }
                else if(getArray(i,j)>0)
                    break;
                j++;
            }
            j=Y-1;
            for(int i=X-1;i>0;i--)
            {
                if(getArray(i,j)>16)
                {
                    kill[1]=getArray(i,j);
                    break;
                }
                else if(getArray(i,j)>0)
                    break;
                j--;
            }
            j=X-1;
            for(int i=Y+1;i<9;i++)
            {
                if(getArray(j,i)>16)
                {
                    kill[2]=getArray(j,i);
                    break;
                }
                else if(getArray(j,i)>0)
                    break;
                j--;
            }
            j=X+1;
            for(int i=Y-1;i>0;i--)
            {
                if(getArray(j,i)>16)
                {
                    kill[3]=getArray(j,i);
                    break;
                }
                else if(getArray(j,i)>0)
                    break;
                j++;
            }
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel15MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel6.getLocation().x;
        y = jLabel6.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==9 || kill[1]==9 || kill[2]==9 || kill[3]==9 || kill[4]==9 || kill[5]==9 || kill[6]==9 || kill[7]==9)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel6,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 9;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel6.setBackground(Color.CYAN);
            jLabel6.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel6);
            X=x/90;
            Y=y/90;
            if(X+2>0 && Y+2>0 && X+2<9 && Y+2<9 && getArray(X+2,Y+2)>16)
            kill[0]=getArray(X+2,Y+2);
            if(X>0 && Y+2>0 && X<9 && Y+2<9 && getArray(X,Y+2)>16)
            kill[1]=getArray(X,Y+2);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel7.getLocation().x;
        y = jLabel7.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==10 || kill[1]==10 || kill[2]==10 || kill[3]==10 || kill[4]==10 || kill[5]==10 || kill[6]==10 || kill[7]==10)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel7,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 10;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel7.setBackground(Color.CYAN);
            jLabel7.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel7);
            X=x/90;
            Y=y/90;
            if(getArray(X+2,Y+2)>16)
            kill[0]=getArray(X+2,Y+2);
            if(getArray(X,Y+2)>16)
            kill[1]=getArray(X,Y+2);
            System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel8.getLocation().x;
        y = jLabel8.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==11 || kill[1]==101 || kill[2]==11 || kill[3]==11 || kill[4]==11 || kill[5]==11 || kill[6]==101 || kill[7]==11)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel8,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 11;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel8.setBackground(Color.CYAN);
            jLabel8.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel8);
            X=x/90;
            Y=y/90;
            if(getArray(X+2,Y+2)>16)
            kill[0]=getArray(X+2,Y+2);
            if(getArray(X,Y+2)>16)
            kill[1]=getArray(X,Y+2);
            System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel9.getLocation().x;
        y = jLabel9.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==12 || kill[1]==12 || kill[2]==12 || kill[3]==12 || kill[4]==12 || kill[5]==12 || kill[6]==12 || kill[7]==12)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel9,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 12;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel9.setBackground(Color.CYAN);
            jLabel9.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel9);
            X=x/90;
            Y=y/90;
            if(getArray(X+2,Y+2)>16)
            kill[0]=getArray(X+2,Y+2);
            if(getArray(X,Y+2)>16)
            kill[1]=getArray(X,Y+2);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel10.getLocation().x;
        y = jLabel10.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==13 || kill[1]==13 || kill[2]==13 || kill[3]==13 || kill[4]==13 || kill[5]==13 || kill[6]==13 || kill[7]==13)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel10,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 13;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel10.setBackground(Color.CYAN);
            jLabel10.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel10);
            X=x/90;
            Y=y/90;
            if(getArray(X+2,Y+2)>16)
            kill[0]=getArray(X+2,Y+2);
            if(getArray(X,Y+2)>16)
            kill[1]=getArray(X,Y+2);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel11.getLocation().x;
        y = jLabel11.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==14 || kill[1]==14 || kill[2]==14 || kill[3]==14 || kill[4]==14 || kill[5]==14 || kill[6]==14 || kill[7]==14)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel11,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 14;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel11.setBackground(Color.CYAN);
            jLabel11.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel11);
            X=x/90;
            Y=y/90;
            if(getArray(X+2,Y+2)>16)
            kill[0]=getArray(X+2,Y+2);
            if(getArray(X,Y+2)>16)
            kill[1]=getArray(X,Y+2);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel11MouseClicked

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel12.getLocation().x;
        y = jLabel12.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==15 || kill[1]==15 || kill[2]==15 || kill[3]==15 || kill[4]==15 || kill[5]==15 || kill[6]==15 || kill[7]==15)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel12,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 15;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel12.setBackground(Color.CYAN);
            jLabel12.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel12);
            X=x/90;
            Y=y/90;
            if(getArray(X+2,Y+2)>16)
            kill[0]=getArray(X+2,Y+2);
            if(getArray(X,Y+2)>16)
            kill[1]=getArray(X,Y+2);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel12MouseClicked

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel13.getLocation().x;
        y = jLabel13.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==16 || kill[1]==16 || kill[2]==16 || kill[3]==16 || kill[4]==16 || kill[5]==16 || kill[6]==16 || kill[7]==16)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel13,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 16;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel13.setBackground(Color.CYAN);
            jLabel13.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel13);
            X=x/90;
            Y=y/90;
            if(getArray(X+2,Y+2)>16)
            kill[0]=getArray(X+2,Y+2);
            if(getArray(X,Y+2)>16)
            kill[1]=getArray(X,Y+2);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel13MouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        if (piece == 1) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece1 p = new Piece1();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel2);
            p.setcolor(0);
            if (p.validateMove(position)) {
                boolean no_piece=true;
                JLabel lab=getjLabel();
                int X=position.x/90+1;
                int Y=position.y/90+1;
                int x_=lab.getLocation().x/90+1;
                int y_=lab.getLocation().y/90+1;
            if(Y>y_)
                {
                    System.out.println("y="+y_+"Y="+Y);
                   for(int i=y_+1;i<Y+1;i++)
                   {
                       System.out.println("x="+x_+"i="+i);
                       if(getArray(x_,i)!=0)
                           no_piece=false;
                           
                   }
                }
                else if(Y<y_)
                {
                    System.out.println("y="+y_+"Y="+Y);
                    for(int i=y_-1;i>Y-1;i--)
                   {
                       if(getArray(x_,i)!=0)
                           no_piece=false;
                           
                   }
                }
                else if(X>x_)
                {
                   for(int i=x_+1;i<X+1;i++)
                   {
                       if(getArray(i,y_)!=0)
                           no_piece=false;
                   }
                }
                else if(X<x_)
                {
                    for(int i=x_-1;i>X-1;i--)
                   {
                       if(getArray(i,y_)!=0)
                           no_piece=false;
                   }
                }
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
             else
            {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel2.setBackground(Color.red);
                this.jLabel2.setOpaque(false);
            }
            } 
            else
            {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel2.setBackground(Color.red);
                this.jLabel2.setOpaque(false);
            }
        } else if (piece == 2) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece2 p = new Piece2();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel3);
            p.setcolor(0);
            if (p.validateMove(position)) {
            boolean no_piece=true;
            JLabel lab=getjLabel();
            int X=position.x/90+1;
            int Y=position.y/90+1;
            if(X>0 && Y>0 && X<9 && Y<9 && getArray(X,Y)!=0)
                no_piece=false;
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel3.setBackground(Color.red);
                this.jLabel3.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel3.setBackground(Color.red);
                this.jLabel3.setOpaque(false);
            }
        } else if (piece == 3) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece3 p = new Piece3();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel4);
            p.setcolor(0);
            if (p.validateMove(position)) {
            boolean no_piece=true;
                JLabel lab=getjLabel();
                int X=position.x/90+1;
                int Y=position.y/90+1;
                int x_=lab.getLocation().x/90+1;
                int y_=lab.getLocation().y/90+1;
                if(Y>y_)
                {
                    if(X>x_)
                    {
                        int j=y_+1;
                        for(int i=x_+1;i<X+1;i++)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j++;
                        }
                    }
                    else if(X<x_)
                    {
                        int j=y_+1;
                        for(int i=x_-1;i>X-1;i--)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j++;
                        }
                    }
                    
                }
                else if(Y<y_)
                {
                    if(X>x_)
                    {
                        int j=y_-1;
                        for(int i=x_+1;i<X+1;i++)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j--;
                        }
                    }
                    else if(X<x_)
                    {
                        int j=y_-1;
                        for(int i=x_-1;i>X-1;i--)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j--;
                        }
                    }
                }
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel4.setBackground(Color.red);
                this.jLabel4.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel4.setBackground(Color.red);
                this.jLabel4.setOpaque(false);
            }
        } else if (piece == 4) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece4 p = new Piece4();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel14);
            p.setcolor(0);
            if (p.validateMove(position)) 
            {
                boolean no_piece=true;
                JLabel lab=getjLabel();
                int X=position.x/90+1;
                int Y=position.y/90+1;
                int x_=lab.getLocation().x/90+1;
                int y_=lab.getLocation().y/90+1;
                if(Y>y_)
                {
                    System.out.println("y="+y_+"Y="+Y);
                    if(X>x_)
                    {
                        int j=y_+1;
                        for(int i=x_+1;i<X+1;i++)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j++;
                        }
                    }
                    else if(X<x_)
                    {
                        int j=y_+1;
                        for(int i=x_-1;i>X-1;i--)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j++;
                        }
                    }
                    else
                    {
                        for(int i=y_+1;i<Y+1;i++)
                        {
                            System.out.println("x="+x_+"i="+i);
                            if(getArray(x_,i)!=0)
                            no_piece=false;
                        }
                    }
                }
                else if(Y<y_)
                {
                    System.out.println("y="+y_+"Y="+Y);
                    if(X>x_)
                    {
                        int j=y_-1;
                        for(int i=x_+1;i<X+1;i++)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j--;
                        }
                    }
                    else if(X<x_)
                    {
                        int j=y_-1;
                        for(int i=x_-1;i>X-1;i--)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j--;
                        }
                    }
                    else
                    {
                        for(int i=y_-1;i>Y-1;i--)
                        {
                            if(getArray(x_,i)!=0)
                            no_piece=false;
                        }
                    }
                }
                else if(X>x_)
                {
                   for(int i=x_+1;i<X+1;i++)
                   {
                       if(getArray(i,y_)!=0)
                           no_piece=false;
                   }
                }
                else if(X<x_)
                {
                    for(int i=x_-1;i>X-1;i--)
                   {
                       if(getArray(i,y_)!=0)
                           no_piece=false;
                   }
                }
            
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel14.setBackground(Color.red);
                this.jLabel14.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel14.setBackground(Color.red);
                this.jLabel14.setOpaque(false);
            }
        } else if (piece == 5) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece5 p = new Piece5();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel5);
            p.setcolor(0);
            if (p.validateMove(position)) {
                
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel5.setBackground(Color.red);
                this.jLabel5.setOpaque(false);
            }
        } else if (piece == 6) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece3 p = new Piece3();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel15);
            p.setcolor(0);
            if (p.validateMove(position)) {
            boolean no_piece=true;
                JLabel lab=getjLabel();
                int X=position.x/90+1;
                int Y=position.y/90+1;
                int x_=lab.getLocation().x/90+1;
                int y_=lab.getLocation().y/90+1;
                
                if(Y>y_)
                {
                    if(X>x_)
                    {
                        int j=y_+1;
                        for(int i=x_+1;i<X+1;i++)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j++;
                        }
                    }
                    else if(X<x_)
                    {
                        int j=y_+1;
                        for(int i=x_-1;i>X-1;i--)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j++;
                        }
                    }
                }
                else if(Y<y_)
                {
                    if(X>x_)
                    {
                        int j=y_-1;
                        for(int i=x_+1;i<X+1;i++)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j--;
                        }
                    }
                    else if(X<x_)
                    {
                        int j=y_-1;
                        for(int i=x_-1;i>X-1;i--)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j--;
                        }
                    }
                   
                }
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel15.setBackground(Color.red);
                this.jLabel15.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel15.setBackground(Color.red);
                this.jLabel15.setOpaque(false);
            }
        } else if (piece == 7) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece2 p = new Piece2();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel16);
            p.setcolor(0);
            if (p.validateMove(position)) {
                
             boolean no_piece=true;
            JLabel lab=getjLabel();
            int X=position.x/90+1;
            int Y=position.y/90+1;
            if(X>0 && Y>0 && X<9 && Y<9 && getArray(X,Y)!=0)
                no_piece=false;
            
            
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel16.setBackground(Color.red);
                this.jLabel16.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel16.setBackground(Color.red);
                this.jLabel16.setOpaque(false);
            }
        } else if (piece == 8) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece1 p = new Piece1();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel17);
            p.setcolor(0);
            if (p.validateMove(position)) {
            boolean no_piece=true;
                JLabel lab=getjLabel();
                int X=position.x/90+1;
                int Y=position.y/90+1;
                int x_=lab.getLocation().x/90+1;
                int y_=lab.getLocation().y/90+1;
            if(Y>y_)
                {
                    System.out.println("y="+y_+"Y="+Y);
                   for(int i=y_+1;i<Y+1;i++)
                   {
                       System.out.println("x="+x_+"i="+i);
                       if(getArray(x_,i)!=0)
                           no_piece=false;
                   }
                }
                else if(Y<y_)
                {
                    System.out.println("y="+y_+"Y="+Y);
                    for(int i=y_-1;i>Y-1;i--)
                   {
                       if(getArray(x_,i)!=0)
                           no_piece=false;
                           
                   }
                }
                else if(X>x_)
                {
                   for(int i=x_+1;i<X+1;i++)
                   {
                       if(getArray(i,y_)!=0)
                           no_piece=false;
                   }
                }
                else if(X<x_)
                {
                    for(int i=x_-1;i>X-1;i--)
                   {
                       if(getArray(i,y_)!=0)
                           no_piece=false;
                   }
                }
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel17.setBackground(Color.red);
                this.jLabel17.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel17.setBackground(Color.red);
                this.jLabel17.setOpaque(false);
            }
        } else if (piece == 9) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel6);
            p.setcolor(0);
            if(first[0]==1)
                p.first();
            if (p.validateMove(position)) {
                
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[0]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel6.setBackground(Color.red);
                this.jLabel6.setOpaque(false);
            }
        } else if (piece == 10) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel7);
            p.setcolor(0);
            if(first[1]==1)
                p.first();
            if (p.validateMove(position)) {
                
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[1]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel7.setBackground(Color.red);
                this.jLabel7.setOpaque(false);
            }
        } else if (piece == 11) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel8);
            p.setcolor(0);
            if(first[2]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[2]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel8.setBackground(Color.red);
                this.jLabel8.setOpaque(false);
            }
        } else if (piece == 12) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel9);
            p.setcolor(0);
            if(first[3]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[3]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel9.setBackground(Color.red);
                this.jLabel9.setOpaque(false);
            }
        } else if (piece == 13) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel10);
            p.setcolor(0);
            if(first[4]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[4]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel10.setBackground(Color.red);
                this.jLabel10.setOpaque(false);
            }
        } else if (piece == 14) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel11);
            p.setcolor(0);
            if(first[5]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[5]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel11.setBackground(Color.red);
                this.jLabel11.setOpaque(false);
            }
        } else if (piece == 15) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel12);
            p.setcolor(0);
            if(first[6]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[6]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel12.setBackground(Color.red);
                this.jLabel12.setOpaque(false);
            }
        } else if (piece == 16) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel13);
            p.setcolor(0);
            if(first[7]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[7]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel13.setBackground(Color.red);
                this.jLabel13.setOpaque(false);
            }
        } else if (piece == 17) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece1 p = new Piece1();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel19);
            p.setcolor(1);
            if (p.validateMove(position)) {
                boolean no_piece=true;
                JLabel lab=getjLabel();
                int X=position.x/90+1;
                int Y=position.y/90+1;
                int x_=lab.getLocation().x/90+1;
                int y_=lab.getLocation().y/90+1;
            if(Y>y_)
                {
                    System.out.println("y="+y_+"Y="+Y);
                   for(int i=y_+1;i<Y+1;i++)
                   {
                       System.out.println("x="+x_+"i="+i);
                       if(getArray(x_,i)!=0)
                           no_piece=false;
                   }
                }
                else if(Y<y_)
                {
                    System.out.println("y="+y_+"Y="+Y);
                    for(int i=y_-1;i>Y-1;i--)
                   {
                       if(getArray(x_,i)!=0)
                           no_piece=false;
                           
                   }
                }
                else if(X>x_)
                {
                   for(int i=x_+1;i<X+1;i++)
                   {
                       if(getArray(i,y_)!=0)
                           no_piece=false;
                   }
                }
                else if(X<x_)
                {
                    for(int i=x_-1;i>X-1;i--)
                   {
                       if(getArray(i,y_)!=0)
                           no_piece=false;
                   }
                }
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel19.setBackground(Color.red);
                this.jLabel19.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel19.setBackground(Color.red);
                this.jLabel19.setOpaque(false);
            }
        } else if (piece == 18) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece2 p = new Piece2();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel21);
            p.setcolor(1);
            if (p.validateMove(position)) {
             boolean no_piece=true;
            JLabel lab=getjLabel();
            int X=position.x/90+1;
            int Y=position.y/90+1;
            if(X>0 && Y>0 && X<9 && Y<9 && getArray(X,Y)!=0)
                no_piece=false;
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel21.setBackground(Color.red);
                this.jLabel21.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel21.setBackground(Color.red);
                this.jLabel21.setOpaque(false);
            }
        } else if (piece == 19) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece3 p = new Piece3();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel23);
            p.setcolor(1);
            if (p.validateMove(position)) {
                boolean no_piece=true;
                JLabel lab=getjLabel();
                int X=position.x/90+1;
                int Y=position.y/90+1;
                int x_=lab.getLocation().x/90+1;
                int y_=lab.getLocation().y/90+1;
                if(Y>y_)
                {
                    if(X>x_)
                    {
                        int j=y_+1;
                        for(int i=x_+1;i<X+1;i++)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j++;
                        }
                    }
                    else if(X<x_)
                    {
                        int j=y_+1;
                        for(int i=x_-1;i>X-1;i--)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j++;
                        }
                    }
                    
                }
                else if(Y<y_)
                {
                    if(X>x_)
                    {
                        int j=y_-1;
                        for(int i=x_+1;i<X+1;i++)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j--;
                        }
                    }
                    else if(X<x_)
                    {
                        int j=y_-1;
                        for(int i=x_-1;i>X-1;i--)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j--;
                        }
                    }
                }
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel23.setBackground(Color.red);
                this.jLabel23.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel23.setBackground(Color.red);
                this.jLabel23.setOpaque(false);
            }
        } else if (piece == 20) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece4 p = new Piece4();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel24);
            p.setcolor(1);
            if (p.validateMove(position)) {
            boolean no_piece=true;
                JLabel lab=getjLabel();
                int X=position.x/90+1;
                int Y=position.y/90+1;
                int x_=lab.getLocation().x/90+1;
                int y_=lab.getLocation().y/90+1;
                if(Y>y_)
                {
                    System.out.println("y="+y_+"Y="+Y);
                    if(X>x_)
                    {
                        int j=y_+1;
                        for(int i=x_+1;i<X+1;i++)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j++;
                        }
                    }
                    else if(X<x_)
                    {
                        int j=y_+1;
                        for(int i=x_-1;i>X-1;i--)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j++;
                        }
                    }
                    else
                    {
                        for(int i=y_+1;i<Y+1;i++)
                        {
                            System.out.println("x="+x_+"i="+i);
                            if(getArray(x_,i)!=0)
                            no_piece=false;
                           
                        }
                    }
                }
                else if(Y<y_)
                {
                    System.out.println("y="+y_+"Y="+Y);
                    if(X>x_)
                    {
                        int j=y_-1;
                        for(int i=x_+1;i<X+1;i++)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j--;
                        }
                    }
                    else if(X<x_)
                    {
                        int j=y_-1;
                        for(int i=x_-1;i>X-1;i--)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j--;
                        }
                    }
                    else
                    {
                        for(int i=y_-1;i>Y-1;i--)
                        {
                            if(getArray(x_,i)!=0)
                            no_piece=false;
                           
                        }
                    }
                }
                else if(X>x_)
                {
                   for(int i=x_+1;i<X+1;i++)
                   {
                       if(getArray(i,y_)!=0)
                           no_piece=false;
                   }
                }
                else if(X<x_)
                {
                    for(int i=x_-1;i>X-1;i--)
                   {
                       if(getArray(i,y_)!=0)
                           no_piece=false;
                   }
                }
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel24.setBackground(Color.red);
                this.jLabel24.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel24.setBackground(Color.red);
                this.jLabel24.setOpaque(false);
            }
        } else if (piece == 21) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece5 p = new Piece5();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel25);
            p.setcolor(1);
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel25.setBackground(Color.red);
                this.jLabel25.setOpaque(false);
            }
        } else if (piece == 22) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece3 p = new Piece3();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel22);
            p.setcolor(1);
            if (p.validateMove(position)) {
            boolean no_piece=true;
                JLabel lab=getjLabel();
                int X=position.x/90+1;
                int Y=position.y/90+1;
                int x_=lab.getLocation().x/90+1;
                int y_=lab.getLocation().y/90+1;
                
                if(Y>y_)
                {
                    if(X>x_)
                    {
                        int j=y_+1;
                        for(int i=x_+1;i<X+1;i++)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j++;
                        }
                    }
                    else if(X<x_)
                    {
                        int j=y_+1;
                        for(int i=x_-1;i>X-1;i--)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j++;
                        }
                    }
                }
                else if(Y<y_)
                {
                    if(X>x_)
                    {
                        int j=y_-1;
                        for(int i=x_+1;i<X+1;i++)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j--;
                        }
                    }
                    else if(X<x_)
                    {
                        int j=y_-1;
                        for(int i=x_-1;i>X-1;i--)
                        {
                            if(getArray(i,j)!=0)
                            no_piece=false;
                            j--;
                        }
                    }
                   
                } 
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel22.setBackground(Color.red);
                this.jLabel22.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel22.setBackground(Color.red);
                this.jLabel22.setOpaque(false);
            }
        } else if (piece == 23) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece2 p = new Piece2();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel20);
            p.setcolor(1);
            if (p.validateMove(position)) {
             boolean no_piece=true;
            JLabel lab=getjLabel();
            int X=position.x/90+1;
            int Y=position.y/90+1;
            if(X>0 && Y>0 && X<9 && Y<9 && getArray(X,Y)!=0)
                no_piece=false;
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel20.setBackground(Color.red);
                this.jLabel20.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel20.setBackground(Color.red);
                this.jLabel20.setOpaque(false);
            }
        } else if (piece == 24) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece1 p = new Piece1();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel18);
            p.setcolor(1);
            if (p.validateMove(position)) {
            boolean no_piece=true;
                JLabel lab=getjLabel();
                int X=position.x/90+1;
                int Y=position.y/90+1;
                int x_=lab.getLocation().x/90+1;
                int y_=lab.getLocation().y/90+1;
            if(Y>y_)
                {
                    System.out.println("y="+y_+"Y="+Y);
                   for(int i=y_+1;i<Y+1;i++)
                   {
                       System.out.println("x="+x_+"i="+i);
                       if(getArray(x_,i)!=0)
                           no_piece=false;
                           
                   }
                }
                else if(Y<y_)
                {
                    System.out.println("y="+y_+"Y="+Y);
                    for(int i=y_-1;i>Y-1;i--)
                   {
                       if(getArray(x_,i)!=0)
                           no_piece=false;
                           
                   }
                }
                else if(X>x_)
                {
                   for(int i=x_+1;i<X+1;i++)
                   {
                       if(getArray(i,y_)!=0)
                           no_piece=false;
                   }
                }
                else if(X<x_)
                {
                    for(int i=x_-1;i>X-1;i--)
                   {
                       if(getArray(i,y_)!=0)
                           no_piece=false;
                   }
                }
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            if(no_piece)
            {
                setArray(rem_x+1,rem_y+1,getArray(X,Y));
                setArray(X,Y,0);
                p.makeMove(position);
            }
            else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel18.setBackground(Color.red);
                this.jLabel18.setOpaque(false);
            }
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel18.setBackground(Color.red);
                this.jLabel18.setOpaque(false);
            }
        } else if (piece == 25) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel30);
            p.setcolor(1);
            if(first[8]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[8]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel30.setBackground(Color.red);
                this.jLabel30.setOpaque(false);
            }
        } else if (piece == 26) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel31);
            p.setcolor(1);
            if(first[9]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[9]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel31.setBackground(Color.red);
                this.jLabel31.setOpaque(false);
            }
        } else if (piece == 27) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel29);
            p.setcolor(1);
            if(first[10]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[10]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel29.setBackground(Color.red);
                this.jLabel29.setOpaque(false);
            }
        } else if (piece == 28) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel28);
            p.setcolor(1);
            if(first[11]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[11]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel28.setBackground(Color.red);
                this.jLabel28.setOpaque(false);
            }
        } else if (piece == 29) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel27);
            p.setcolor(1);
            if(first[12]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[12]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");

                this.jLabel27.setBackground(Color.red);
                this.jLabel27.setOpaque(false);
            }
        } else if (piece == 30) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel32);
            p.setcolor(1);
            if(first[13]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[13]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel32.setBackground(Color.red);
                this.jLabel32.setOpaque(false);
            }
        } else if (piece == 31) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel33);
            p.setcolor(1);
            if(first[14]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[14]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel33.setBackground(Color.red);
                this.jLabel33.setOpaque(false);
            }
        } else if (piece == 32) {
            for(int i=0;i<8;i++)
                kill[i]=0;
            int rem_x, rem_y;
            System.out.println("Yes it is going to move");
            Piece6 p = new Piece6();
            rem_x = evt.getX() / 90;
            rem_y = evt.getY() / 90;
            Location position = new Location();
            position.x = rem_x * 90 + 12;
            position.y = rem_y * 90 + 12;
            p.setLabel(this.jLabel26);
            p.setcolor(1);
            if(first[15]==1)
                p.first();
            if (p.validateMove(position)) {
            JLabel lab=getjLabel();
            int X=lab.getLocation().x/90+1;
            int Y=lab.getLocation().y/90+1;
            setArray(rem_x+1,rem_y+1,getArray(X,Y));
            setArray(X,Y,0);
            first[15]=0;
            p.makeMove(position);
            } else {
                JOptionPane.showMessageDialog(null, "INVALID MOVE");
                System.out.println("Invalid Move");
                this.jLabel26.setBackground(Color.red);
                this.jLabel26.setOpaque(false);
            }
        }                                                                                                                          
        piece = 0;
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel19.getLocation().x;
        y = jLabel19.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==17 || kill[1]==17 || kill[2]==17 || kill[3]==17 || kill[4]==17 || kill[5]==17 || kill[6]==17 || kill[7]==17)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece1 p=new Piece1();
            p.kill(jLabel19,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 17;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel19.setBackground(Color.CYAN);
            jLabel19.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel19);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            for(int i=X+1;i<9;i++)
            {
                if(getArray(i,Y)>0 && getArray(i,Y)<17)
                {
                    kill[0]=getArray(i,Y);
                    break;
                }
                else if(getArray(i,Y)>16)
                    break;
            }
            for(int i=X-1;i>0;i--)
            {
                if(getArray(i,Y)>0 && getArray(i,Y)<17)
                {
                    kill[1]=getArray(i,Y);
                    break;
                }
                else if(getArray(i,Y)>16)
                    break;
            }
            for(int i=Y+1;i<9;i++)
            {
                if(getArray(X,i)>0 && getArray(X,i)<17)
                {
                    kill[2]=getArray(X,i);
                    break;
                }
                else if(getArray(X,i)>16)
                    break;
            }
            for(int i=Y-1;i>0;i--)
            {
                if(getArray(X,i)>0 && getArray(X,i)<17)
                {
                    kill[3]=getArray(X,i);
                    break;
                }
                else if(getArray(X,i)>16)
                    break;
            }
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel19MouseClicked

    private void jLabel21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel21MouseClicked
        // TODO add your handling code here:
        
        int X,Y;
        x = jLabel21.getLocation().x;
        y = jLabel21.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==18 || kill[1]==18 || kill[2]==18 || kill[3]==18 || kill[4]==18 || kill[5]==18 || kill[6]==10 || kill[7]==18)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece2 p=new Piece2();
            p.kill(jLabel21,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 18;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel21.setBackground(Color.CYAN);
            jLabel21.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel21);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            if(X+2>0 && Y+1>0 && X+2<9 && Y+1<9 && getArray(X+2,Y+1)<17)
            kill[0]=getArray(X+2,Y+1);
            if(X+2>0 && Y-1>0 && X+2<9 && Y-1<9 && getArray(X+2,Y-1)<17)
            kill[1]=getArray(X+2,Y-1);
            if(X-2>0 && Y+1>0 && X-2<9 && Y+1<9 && getArray(X-2,Y+1)<17)
            kill[2]=getArray(X-2,Y+1);
            if(X-2>0 && Y-1>0 && X-2<9 && Y-1<9 && getArray(X-2,Y-1)<17)
            kill[3]=getArray(X-2,Y-1);
            if(X+1>0 && Y+2>0 && X+1<9 && Y+2<9 && getArray(X+1,Y+2)<17)
            kill[4]=getArray(X+1,Y+2);
            if(X+1>0 && Y-2>0 && X+1<9 && Y-2<9 && getArray(X+1,Y-2)<17)
            kill[5]=getArray(X+1,Y-2);
            if(X-1>0 && Y+2>0 && X-1<9 && Y+2<9 && getArray(X-1,Y+2)<17)
            kill[6]=getArray(X-1,Y+2);
            if(X-1>0 && Y-2>0 && X-1<9 && Y-2<9 && getArray(X-1,Y-2)<17)
            kill[7]=getArray(X-1,Y-2);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel21MouseClicked

    private void jLabel23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel23MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel23.getLocation().x;
        y = jLabel23.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==19 || kill[1]==19 || kill[2]==19 || kill[3]==19 || kill[4]==19 || kill[5]==19 || kill[6]==19 || kill[7]==19)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece3 p=new Piece3();
            p.kill(jLabel23,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 19;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel23.setBackground(Color.CYAN);
            jLabel23.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel23);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            int j=Y+1;
            for(int i=X+1;i<9;i++)
            {
           
                if(getArray(i,j)>0 && getArray(i,j)<17)
                {
                    kill[0]=getArray(i,j);
                    break;
                }
                else if(getArray(i,j)>16)
                    break;
                j++;
            }
            j=Y-1;
            for(int i=X-1;i>0;i--)
            {
                if(getArray(i,j)>0 && getArray(i,j)<17)
                {
                    kill[1]=getArray(i,j);
                    break;
                }
                else if(getArray(i,j)>16)
                    break;
                j--;
            }
            j=X-1;
            for(int i=Y+1;i<9;i++)
            {
                if(getArray(j,i)>0 && getArray(j,i)<17)
                {
                    kill[2]=getArray(j,i);
                    break;
                }
                else if(getArray(j,i)>16)
                    break;
                j--;
            }
            j=X+1;
            for(int i=Y-1;i>0;i--)
            {
                if(getArray(j,i)>0 && getArray(j,i)<17)
                {
                    kill[3]=getArray(j,i);
                    break;
                }
                else if(getArray(j,i)>16)
                    break;
                j++;
            }
           // System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel23MouseClicked

    private void jLabel24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel24MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel24.getLocation().x;
        y = jLabel24.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==20 || kill[1]==20 || kill[2]==20 || kill[3]==20 || kill[4]==20 || kill[5]==20 || kill[6]==20 || kill[7]==20)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece4 p=new Piece4();
            p.kill(jLabel24,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 20;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel24.setBackground(Color.CYAN);
            jLabel24.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel24);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            for(int i=X+1;i<9;i++)
            {
                if(i>0 && Y>0 && i<9 && Y<9 && getArray(i,Y)>0 && getArray(i,Y)<17)
                {
                    kill[0]=getArray(i,Y);
                    break;
                }
                else if(i>0 && Y>0 && i<9 && Y<9 && getArray(i,Y)>16)
                    break;
            }
            for(int i=X-1;i>0;i--)
            {
                if(i>0 && Y>0 && i<9 && Y<9 && getArray(i,Y)>0 && getArray(i,Y)<17)
                {
                    kill[1]=getArray(i,Y);
                    break;
                }
                else if(i>0 && Y>0 && i<9 && Y<9 && getArray(i,Y)>16)
                    break;
            }
            for(int i=Y+1;i<9;i++)
            {
                if(i>0 && X>0 && i<9 && X<9 && getArray(X,i)>0 && getArray(X,i)<17)
                {
                    kill[2]=getArray(X,i);
                    break;
                }
                else if(i>0 && X>0 && i<9 && X<9 && getArray(X,i)>16)
                    break;
            }
            for(int i=Y-1;i>0;i--)
            {
                if(i>0 && X>0 && i<9 && X<9 && getArray(X,i)>0 && getArray(X,i)<17)
                {
                    kill[3]=getArray(X,i);
                    break;
                }
                else if(i>0 && X>0 && i<9 && X<9 && getArray(X,i)>16)
                    break;
            }
            int j=Y+1;
            for(int i=X+1;i<9;i++)
            {
           
                if(i>0 && j>0 && i<9 && j<9 && getArray(i,j)>0 && getArray(i,j)<17)
                {
                    kill[4]=getArray(i,j);
                    break;
                }
                else if(i>0 && j>0 && i<9 && j<9 && getArray(i,j)>16)
                    break;
                j++;
            }
            j=Y-1;
            for(int i=X-1;i>0;i--)
            {
                if(i>0 && j>0 && i<9 && j<9 && getArray(i,j)>0 && getArray(i,j)<17)
                {
                    kill[5]=getArray(i,j);
                    break;
                }
                else if(i>0 && j>0 && i<9 && j<9 && getArray(i,j)>16)
                    break;
                j--;
            }
            j=X-1;
            for(int i=Y+1;i<9;i++)
            {
                if(i>0 && j>0 && i<9 && j<9 && getArray(j,i)>0 && getArray(j,i)<17)
                {
                    kill[6]=getArray(j,i);
                    break;
                }
                else if(i>0 && j>0 && i<9 && j<9 && getArray(j,i)>16)
                    break;
                j--;
            }
            j=X+1;
            for(int i=Y-1;i>0;i--)
            {
                if(i>0 && j>0 && i<9 && j<9 && getArray(j,i)>0 && getArray(j,i)<17)
                {
                    kill[7]=getArray(j,i);
                    break;
                }
                else if(i>0 && j>0 && i<9 && j<9 && getArray(j,i)>16)
                    break;
                j++;
            }
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel24MouseClicked

    private void jLabel25MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel25MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel25.getLocation().x;
        y = jLabel25.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==21 || kill[1]==21 || kill[2]==21 || kill[3]==21 || kill[4]==21 || kill[5]==21 || kill[6]==21 || kill[7]==21)
        {
            JOptionPane.showMessageDialog(null, "BLACK WON");
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece5 p=new Piece5();
            p.kill(jLabel25,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 21;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel25.setBackground(Color.CYAN);
            jLabel25.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel25);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            if(X>0 && Y+1>0 && X<9 && Y+1<9 && getArray(X,Y+1)>0 && getArray(X,Y+1)<17)
                kill[0]=getArray(X,Y+1);
            if(X>0 && Y-1>0 && X<9 && Y-1<9 && getArray(X,Y-1)>0 && getArray(X,Y-1)<17)
                kill[1]=getArray(X,Y-1);
            if(X+1>0 && Y>0 && X+1<9 && Y<9 && getArray(X+1,Y)>0 && getArray(X+1,Y)<17)
                kill[2]=getArray(X+1,Y);
            if(X+1>0 && Y+1>0 && X+1<9 && Y+1<9 && getArray(X+1,Y+1)>0 && getArray(X+1,Y+1)<17)
                kill[3]=getArray(X+1,Y+1);
            if(X+1>0 && Y-1>0 && X+1<9 && Y-1<9 && getArray(X+1,Y-1)>0 && getArray(X+1,Y-1)<17)
                kill[4]=getArray(X+1,Y-1);
            if(X-1>0 && Y>0 && X-1<9 && Y<9 && getArray(X-1,Y)>0 && getArray(X-1,Y)<17)
                kill[5]=getArray(X-1,Y);
            if(X-1>0 && Y-1>0 && X-1<9 && Y-1<9 && getArray(X-1,Y-1)>0 && getArray(X-1,Y-1)<17)
                kill[6]=getArray(X-1,Y-1);
            if(X-1>0 && Y+1>0 && X-1<9 && Y+1<9 && getArray(X-1,Y+1)>0 && getArray(X-1,Y+1)<17)
                kill[7]=getArray(X-1,Y+1);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel25MouseClicked

    private void jLabel22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel22MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel22.getLocation().x;
        y = jLabel22.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==22 || kill[1]==22 || kill[2]==22 || kill[3]==22 || kill[4]==22 || kill[5]==22 || kill[6]==22 || kill[7]==22)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece3 p=new Piece3();
            p.kill(jLabel22,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 22;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel22.setBackground(Color.CYAN);
            jLabel22.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel22);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            int j=Y+1;
            for(int i=X+1;i<9;i++)
            {
           
                if(getArray(i,j)>0 && getArray(i,j)<17)
                {
                    kill[0]=getArray(i,j);
                    break;
                }
                else if(getArray(i,j)>16)
                    break;
                j++;
            }
            j=Y-1;
            for(int i=X-1;i>0;i--)
            {
                if(getArray(i,j)>0 && getArray(i,j)<17)
                {
                    kill[1]=getArray(i,j);
                    break;
                }
                else if(getArray(i,j)>16)
                    break;
                j--;
            }
            j=X-1;
            for(int i=Y+1;i<9;i++)
            {
                if(getArray(j,i)>0 && getArray(j,i)<17)
                {
                    kill[2]=getArray(j,i);
                    break;
                }
                else if(getArray(j,i)>16)
                    break;
                j--;
            }
            j=X+1;
            for(int i=Y-1;i>0;i--)
            {
                if(getArray(j,i)>0 && getArray(j,i)<17)
                {
                    kill[3]=getArray(j,i);
                    break;
                }
                else if(getArray(j,i)>16)
                    break;
                j++;
            }
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel22MouseClicked

    private void jLabel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel20.getLocation().x;
        y = jLabel20.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==23 || kill[1]==23 || kill[2]==23 || kill[3]==23 || kill[4]==23 || kill[5]==23 || kill[6]==23 || kill[7]==23)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece2 p=new Piece2();
            p.kill(jLabel20,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 23;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel20.setBackground(Color.CYAN);
            jLabel20.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel20);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            if(X+2>0 && Y+1>0 && X+2<9 && Y+1<9 && getArray(X+2,Y+1)<17)
            kill[0]=getArray(X+2,Y+1);
            if(X+2>0 && Y-1>0 && X+2<9 && Y-1<9 && getArray(X+2,Y-1)<17)
            kill[1]=getArray(X+2,Y-1);
            if(X-2>0 && Y+1>0 && X-2<9 && Y+1<9 && getArray(X-2,Y+1)<17)
            kill[2]=getArray(X-2,Y+1);
            if(X-2>0 && Y-1>0 && X-2<9 && Y-1<9 && getArray(X-2,Y-1)<17)
            kill[3]=getArray(X-2,Y-1);
            if(X+1>0 && Y+2>0 && X+1<9 && Y+2<9 && getArray(X+1,Y+2)<17)
            kill[4]=getArray(X+1,Y+2);
            if(X+1>0 && Y-2>0 && X+1<9 && Y-2<9 && getArray(X+1,Y-2)<17)
            kill[5]=getArray(X+1,Y-2);
            if(X-1>0 && Y+2>0 && X-1<9 && Y+2<9 && getArray(X-1,Y+2)<17)
            kill[6]=getArray(X-1,Y+2);
            if(X-1>0 && Y-2>0 && X-1<9 && Y-2<9 && getArray(X-1,Y-2)<17)
            kill[7]=getArray(X-1,Y-2);
            //System.out.println("KILL"+kill);
        }
       
    }//GEN-LAST:event_jLabel20MouseClicked

    private void jLabel18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel18MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel18.getLocation().x;
        y = jLabel18.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==24 || kill[1]==24 || kill[2]==24 || kill[3]==24 || kill[4]==24 || kill[5]==24 || kill[6]==24 || kill[7]==24)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece1 p=new Piece1();
            p.kill(jLabel18,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 24;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel18.setBackground(Color.CYAN);
            jLabel18.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel18);
            X=x/90+1;
            Y=y/90+1;
            System.out.println("X="+X+"Y="+Y);
            for(int i=X+1;i<9;i++)
            {
                if(getArray(i,Y)>0 && getArray(i,Y)<17)
                {
                    kill[0]=getArray(i,Y);
                    break;
                }
                else if(getArray(i,Y)>16)
                    break;
            }
            for(int i=X-1;i>0;i--)
            {
                if(getArray(i,Y)>0 && getArray(i,Y)<17)
                {
                    kill[1]=getArray(i,Y);
                    break;
                }
                else if(getArray(i,Y)>16)
                    break;
            }
            for(int i=Y+1;i<9;i++)
            {
                if(getArray(X,i)>0 && getArray(X,i)<17)
                {
                    kill[2]=getArray(X,i);
                    break;
                }
                else if(getArray(X,i)>16)
                    break;
            }
            for(int i=Y-1;i>0;i--)
            {
                if(getArray(X,i)>0 && getArray(X,i)<17)
                {
                    kill[3]=getArray(X,i);
                    break;
                }
                else if(getArray(X,i)>16)
                    break;
            }
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel18MouseClicked

    private void jLabel30MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel30MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel30.getLocation().x;
        y = jLabel30.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==25 || kill[1]==25 || kill[2]==25 || kill[3]==25 || kill[4]==25 || kill[5]==25 || kill[6]==25 || kill[7]==25)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel30,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 25;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel30.setBackground(Color.CYAN);
            jLabel30.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel30);
            X=x/90;
            Y=y/90;
            if(X>0 && Y>0 && X<9 && Y<9 && getArray(X,Y)<17 && getArray(X,Y)>0)
            kill[0]=getArray(X,Y);
            if(X+2>0 && Y>0 && X+2<9 && Y<9 && getArray(X+2,Y)<17 && getArray(X+2,Y)>0)
            kill[1]=getArray(X+2,Y);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel30MouseClicked

    private void jLabel31MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel31MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel31.getLocation().x;
        y = jLabel31.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==26 || kill[1]==26 || kill[2]==26 || kill[3]==26 || kill[4]==26 || kill[5]==26 || kill[6]==26 || kill[7]==26)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel31,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 26;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel31.setBackground(Color.CYAN);
            jLabel31.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel31);
            X=x/90;
            Y=y/90;
            if(X>0 && Y>0 && X<9 && Y<9 && getArray(X,Y)<17 && getArray(X,Y)>0)
            kill[0]=getArray(X,Y);
            if(X+2>0 && Y>0 && X+2<9 && Y<9 && getArray(X+2,Y)<17 && getArray(X+2,Y)>0)
            kill[1]=getArray(X+2,Y);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel31MouseClicked

    private void jLabel29MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel29MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel29.getLocation().x;
        y = jLabel29.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==27 || kill[1]==27 || kill[2]==27 || kill[3]==27 || kill[4]==27 || kill[5]==27 || kill[6]==27 || kill[7]==27)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel29,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 27;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel29.setBackground(Color.CYAN);
            jLabel29.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel29);
            X=x/90;
            Y=y/90;
            if(X>0 && Y>0 && X<9 && Y<9 && getArray(X,Y)<17 && getArray(X,Y)>0)
            kill[0]=getArray(X,Y);
            if(X+2>0 && Y>0 && X+2<9 && Y<9 && getArray(X+2,Y)<17 && getArray(X+2,Y)>0)
            kill[1]=getArray(X+2,Y);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel29MouseClicked

    private void jLabel28MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel28MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel28.getLocation().x;
        y = jLabel28.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==28 || kill[1]==28 || kill[2]==28 || kill[3]==28 || kill[4]==28 || kill[5]==28 || kill[6]==28 || kill[7]==28)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel28,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 28;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel28.setBackground(Color.CYAN);
            jLabel28.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel28);
            X=x/90;
            Y=y/90;
            if(X>0 && Y>0 && X<9 && Y<9 && getArray(X,Y)<17 && getArray(X,Y)>0)
            kill[0]=getArray(X,Y);
            if(X+2>0 && Y>0 && X+2<9 && Y<9 && getArray(X+2,Y)<17 && getArray(X+2,Y)>0)
            kill[1]=getArray(X+2,Y);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel28MouseClicked

    private void jLabel27MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel27MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel27.getLocation().x;
        y = jLabel27.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==29 || kill[1]==29 || kill[2]==29 || kill[3]==29 || kill[4]==29 || kill[5]==29 || kill[6]==29 || kill[7]==29)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel27,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 29;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel27.setBackground(Color.CYAN);
            jLabel27.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel27);
            X=x/90;
            Y=y/90;
            if(X>0 && Y>0 && X<9 && Y<9 && getArray(X,Y)<17 && getArray(X,Y)>0)
            kill[0]=getArray(X,Y);
            if(X+2>0 && Y>0 && X+2<9 && Y<9 && getArray(X+2,Y)<17 && getArray(X+2,Y)>0)
            kill[1]=getArray(X+2,Y);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel27MouseClicked

    private void jLabel32MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel32MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel32.getLocation().x;
        y = jLabel32.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==30 || kill[1]==30 || kill[2]==30 || kill[3]==30 || kill[4]==30 || kill[5]==30 || kill[6]==30 || kill[7]==30)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel32,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 30;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel32.setBackground(Color.CYAN);
            jLabel32.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel32);
            X=x/90;
            Y=y/90;
            if(X>0 && Y>0 && X<9 && Y<9 && getArray(X,Y)<17 && getArray(X,Y)>0)
            kill[0]=getArray(X,Y);
            if(X+2>0 && Y>0 && X+2<9 && Y<9 && getArray(X+2,Y)<17 && getArray(X+2,Y)>0)
            kill[1]=getArray(X+2,Y);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel32MouseClicked

    private void jLabel26MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel26MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel26.getLocation().x;
        y = jLabel26.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==32 || kill[1]==32 || kill[2]==32 || kill[3]==32 || kill[4]==32 || kill[5]==32 || kill[6]==32 || kill[7]==32)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel26,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 32;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel26.setBackground(Color.CYAN);
            jLabel26.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel26);
            X=x/90;
            Y=y/90;
            if(X>0 && Y>0 && X<9 && Y<9 && getArray(X,Y)<17 && getArray(X,Y)>0)
            kill[0]=getArray(X,Y);
            if(X+2>0 && Y>0 && X+2<9 && Y<9 && getArray(X+2,Y)<17 && getArray(X+2,Y)>0)
            kill[1]=getArray(X+2,Y);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel26MouseClicked

    private void jLabel33MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel33MouseClicked
        // TODO add your handling code here:
        int X,Y;
        x = jLabel33.getLocation().x;
        y = jLabel33.getLocation().y;
        JLabel lab=getjLabel();
        if(selected && kill[0]==31 || kill[1]==31 || kill[2]==31 || kill[3]==31 || kill[4]==31 || kill[5]==31 || kill[6]==31 || kill[7]==31)
        {
            System.out.println("Hurray killed");
            X=lab.getLocation().x/90+1;
            Y=lab.getLocation().y/90+1;
            setArray(x/90+1,y/90+1,getArray(X,Y));
            setArray(X,Y,0);
            Piece6 p=new Piece6();
            p.kill(jLabel33,lab);
            for(int i=0;i<8;i++)
                kill[i]=0;
        }
        else
        {
            piece = 31;
            lab.setBackground(Color.red);
            lab.setOpaque(false);
            jLabel33.setBackground(Color.CYAN);
            jLabel33.setOpaque(rootPaneCheckingEnabled);
            selected=true;
            setjLabel(jLabel33);
            X=x/90;
            Y=y/90;
            if(X>0 && Y>0 && X<9 && Y<9 && getArray(X,Y)<17 && getArray(X,Y)>0)
            kill[0]=getArray(X,Y);
            if(X+2>0 && Y>0 && X+2<9 && Y<9 && getArray(X+2,Y)<17 && getArray(X+2,Y)>0)
            kill[1]=getArray(X+2,Y);
            //System.out.println("KILL"+kill);
        }
    }//GEN-LAST:event_jLabel33MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ImageDisplay().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    // private void setOpaque(boolean b) {
    //     throw new UnsupportedOperationException("Not yet implemented");  
    // }
}
